set autoread                    " Load file from disk, ie for git reset
set nocompatible		            " Not concerned with vi compatibility
set lazyredraw                  " Don't update while executing macros
set history=1000  		          " Remember last 1000 commands
set scrolloff=4                 " Keep at least 4 lines below cursor
set expandtab                   " Convert <tab> to spaces (2 or 4)
set shiftwidth=2
set softtabstop=2
set secure                      " Limit what modelines and autocmds can do
set autowrite                   " write for me when I take any action
set laststatus=2
set noshowmode
set nu

let mapleader = ' '

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" You will load your plugin here
Plug 'tomtom/tcomment_vim'

" Leader C is the prefix for code related mapp√Ængs
noremap <silent> <Leader>cc :TComment<CR>

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
nnoremap <C-p> :Files<CR>
nnoremap <C-t> :History<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrl B for buffer related mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>bp :CtrlPBuffer<CR> " cycle between buffer
nnoremap <silent> <Leader>bb :bn<CR> "create (N)ew buffer
nnoremap <silent> <Leader>bd :bdelete<CR> "(D)elete the current buffer
nnoremap <silent> <Leader>bu :bunload<CR> "(U)nload the current buffer
nnoremap <silent> <Leader>bl :setnomodifiable<CR> " (L)ock the current buffer"
nnoremap <silent> <C-b> :Buffers<CR>

Plug 'itchyny/lightline.vim'

Plug 'sheerun/vim-polyglot'

Plug 'editorconfig/editorconfig-vim'

Plug 'godlygeek/tabular'

vnoremap <silent> <Leader>cee    :Tabularize /=<CR>
vnoremap <silent> <Leader>cet    :Tabularize /#<CR>
vnoremap <silent> <Leader>ce     :Tabularize /

Plug 'vim-scripts/vim-auto-save'

let g:auto_save = 1
let g:auto_save_in_insert_mode = 0

Plug 'christoomey/vim-tmux-navigator'

Plug 'skwp/greplace.vim'

set grepprg=ack

let g:grep_cmd_opts = '--noheading'

Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

nnoremap <silent> <C-]> :LspDefinition<CR>
nnoremap <silent> T :LspHover<CR>
nnoremap <c-y> :LspDocumentDiagnostics<Cr>
nmap <Leader>fef :LspDocumentFormat<CR>

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('css-languageserver')
    " npm install -g vscode-css-languageserver-bin
    au User lsp_setup call lsp#register_server({
        \ 'name': 'css-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
        \ 'whitelist': ['css', 'less', 'sass'],
        \ })
endif

if executable('docker-langserver')
    " npm install -g dockerfile-language-server-nodejs
    au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['dockerfile'],
        \ })
endif


if executable('gopls')
    " go get -u golang.org/x/tools/cmd/gopls
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif

if executable('typescript-language-server')
      " npm install -g typescript typescript-language-server
      au User lsp_setup call lsp#register_server({
          \ 'name': 'javascript support using typescript-language-server',
          \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
          \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
          \ 'whitelist': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
          \ })
endif

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

let g:lsp_async_completion = 1
imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

Plug 'vim-scripts/taglist.vim'
nnoremap tt :Tlist<CR>

" Initialize plugin system
call plug#end()

" reloads .vimrc -- making all changes active
map <silent> <Leader>sop :source ~/.vimrc<CR>:PlugInstall<CR>:bdelete<CR>:exe ":echo 'vimrc reloaded'"<CR>

" make backspaces deletejsensibly
set backspace=indent,eol,start

set listchars=tab:>.,trail:.,extends:#,nbsp:.

set smartcase
set ignorecase

map <CR> o<Esc>k

cmap w!! %!sudo tee > /dev/null %

" Quick toggle between two files
nnoremap <leader><leader> <C-^>

" Easy navigation for editing and cding
nmap <Leader>ec :e ~/code/
nmap <Leader>eh :e ~/
nnoremap <leader>er :e <C-r>=escape(expand("%:p:h"), ' ')<cr>/

"Make Y yank to end of line (like D, or C)
nmap y y$

" easy access to the start of the line
nnoremap 0 ^

" leader-; to enter command mode. No more holding shift!
nnoremap <leader>; :
vnoremap <leader>; :

" Quickly open a second window to view files side by side
nmap <LEADER>vn :split<CR>
nmap <LEADER>vs :vsplit<CR>

" Move one line at a time, aka 'fine ajdustment'
nnoremap j gj
nnoremap k gk

" Go to position of last edit. Mnem: 'Go to Edit'
nnoremap ge `.

" Avoid Escape
imap jj <Esc>

" quick quit
nnoremap Q :qa! <CR>
nnoremap qq :q! <CR>

" copy
nnoremap yy Y

" quick replace
nnoremap <Leader>sub :%s///g<left><left><left>
vnoremap <Leader>sub :s///g<left><left><left>
nnoremap <leader>wub :%s//<C-r><C-w>/g<cr>

" Clipboard
if system('uname')=~'Darwin'
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

set noeb vb t_vb=
