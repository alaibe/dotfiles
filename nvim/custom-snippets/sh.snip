# Bash/Shell snippets for LuaSnip

snippet bash "Bash shebang"
	#!/bin/bash

	${0:# Script content}

snippet zsh "Zsh shebang"
	#!/bin/zsh

	${0:# Script content}

snippet sh "Shell shebang"
	#!/bin/sh

	${0:# Script content}

snippet set "Strict bash settings"
	set -euo pipefail
	${0:# Script content}

snippet function "Function definition"
	function ${1:function_name}() {
		${0:# Function body}
	}

snippet func "Function definition (short)"
	${1:function_name}() {
		${0:# Function body}
	}

snippet if "If statement"
	if [[ ${1:condition} ]]; then
		${0:# Code}
	fi

snippet ifelse "If-else statement"
	if [[ ${1:condition} ]]; then
		${2:# If code}
	else
		${0:# Else code}
	fi

snippet elif "If-elif-else statement"
	if [[ ${1:condition} ]]; then
		${2:# If code}
	elif [[ ${3:condition} ]]; then
		${4:# Elif code}
	else
		${0:# Else code}
	fi

snippet for "For loop"
	for ${1:item} in ${2:\$@}; do
		${0:# Code}
	done

snippet forc "For C-style loop"
	for ((${1:i=0}; ${2:i<10}; ${3:i++})); do
		${0:# Code}
	done

snippet while "While loop"
	while [[ ${1:condition} ]]; do
		${0:# Code}
	done

snippet until "Until loop"
	until [[ ${1:condition} ]]; do
		${0:# Code}
	done

snippet case "Case statement"
	case ${1:\$variable} in
		${2:pattern1})
			${3:# Code}
			;;
		${4:pattern2})
			${5:# Code}
			;;
		*)
			${0:# Default}
			;;
	esac

snippet array "Array declaration"
	${1:array_name}=(${0:"item1" "item2" "item3"})

snippet declare "Declare array"
	declare -a ${1:array_name}=(${0:"item1" "item2"})

snippet associative "Associative array"
	declare -A ${1:array_name}=(
		[${2:key1}]="${3:value1}"
		[${4:key2}]="${0:value2}"
	)

snippet read "Read user input"
	read -p "${1:Enter value: }" ${0:variable}

snippet readarray "Read into array"
	readarray -t ${1:array_name} < ${0:file}

snippet redirect "Redirect output"
	${1:command} > ${2:file} 2>&1

snippet heredoc "Here document"
	cat << ${1:EOF}
	${2:Content here}
	${0:More content}
	$1

snippet test "Test condition"
	if [[ -${1:f} ${2:file} ]]; then
		${0:# File exists}
	fi

snippet exists "Check file exists"
	if [[ -f "${1:file}" ]]; then
		${0:# File exists}
	fi

snippet dir_exists "Check directory exists"
	if [[ -d "${1:directory}" ]]; then
		${0:# Directory exists}
	fi

snippet empty "Check if empty"
	if [[ -z "${1:\$variable}" ]]; then
		${0:# Variable is empty}
	fi

snippet not_empty "Check if not empty"
	if [[ -n "${1:\$variable}" ]]; then
		${0:# Variable is not empty}
	fi

snippet getopts "Parse command line options"
	while getopts "${1:h}" opt; do
		case \$opt in
			${2:h})
				${3:echo "Help"}
				;;
			\?)
				echo "Invalid option: -\$OPTARG"
				exit 1
				;;
		esac
	done

snippet trap "Trap signal"
	trap '${1:cleanup_function}' ${0:EXIT}

snippet cleanup "Cleanup function"
	cleanup() {
		echo "Cleaning up..."
		${0:# Cleanup code}
	}
	trap cleanup EXIT

snippet colors "Color definitions"
	RED='\033[0;31m'
	GREEN='\033[0;32m'
	YELLOW='\033[1;33m'
	BLUE='\033[0;34m'
	NC='\033[0m' # No Color

	${0:# Usage: echo -e "\${RED}Error\${NC}"}

snippet log "Logging function"
	log() {
		echo "[$(date '+%Y-%m-%d %H:%M:%S')] \$*" >&2
	}

snippet error "Error handling"
	error() {
		echo "ERROR: \$*" >&2
		exit 1
	}

snippet usage "Usage function"
	usage() {
		cat << EOF
	Usage: \$0 [OPTIONS]

	${1:Description of the script}

	OPTIONS:
		${2:-h, --help    Show this help message}
	EOF
	}

snippet script_template "Full script template"
	#!/bin/bash

	set -euo pipefail

	# Colors
	RED='\033[0;31m'
	GREEN='\033[0;32m'
	YELLOW='\033[1;33m'
	NC='\033[0m'

	# Logging
	log() {
		echo "[$(date '+%Y-%m-%d %H:%M:%S')] \$*" >&2
	}

	error() {
		echo -e "\${RED}ERROR: \$*\${NC}" >&2
		exit 1
	}

	# Cleanup
	cleanup() {
		log "Cleaning up..."
	}
	trap cleanup EXIT

	# Usage
	usage() {
		cat << EOF
	Usage: \$0 [OPTIONS]

	${1:Script description}
	EOF
	}

	# Main function
	main() {
		${0:# Script logic}
	}

	# Run main function
	main "\$@"
