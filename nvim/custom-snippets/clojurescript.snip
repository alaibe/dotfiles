# ClojureScript snippets for LuaSnip (SnipMate format)

snippet shadow "shadow-cljs.edn config"
	{:source-paths ["src" "test"]

	 :dependencies
	 [[reagent "${1:1.2.0}"]
	  [re-frame "${2:1.3.0}"]]

	 :dev-http {${3:8080} "${4:public}"}

	 :builds
	 {:${5:app}
	  {:target :browser
	   :output-dir "${6:public/js}"
	   :asset-path "/${7:js}"
	   :modules {:main {:init-fn ${8:my-app.core/init}}}
	   :dev {:compiler-options {:closure-defines {re-frame.trace.trace-enabled? true}}}}}}
	$0

snippet reagent "Reagent component"
	(defn ${1:component-name}
	  [${2:props}]
	  [:${3:div}
	   ${0:content}])

snippet re-frame-event "re-frame event handler"
	(rf/reg-event-db
	 ::${1:event-name}
	 (fn [db [_ ${2:args}]]
	   ${0:db}))

snippet re-frame-sub "re-frame subscription"
	(rf/reg-sub
	 ::${1:subscription-name}
	 (fn [db _]
	   ${0:(get db :something)}))

snippet re-frame-fx "re-frame effect handler"
	(rf/reg-event-fx
	 ::${1:event-name}
	 (fn [{:keys [db]} [_ ${2:args}]]
	   {:db ${3:db}
	    ${0:;; other effects}}))

snippet dispatch "re-frame dispatch"
	(rf/dispatch [::${1:event-name} ${0:args}])

snippet subscribe "re-frame subscribe"
	@(rf/subscribe [::${1:subscription-name}${2: args}])

snippet hiccup "Hiccup element"
	[:${1:div}${2: {:class "${3:class-name}"}}
	 ${0:content}]

snippet form-2 "Reagent Form-2 component"
	(defn ${1:component-name}
	  [${2:props}]
	  (let [${3:local-state} (r/atom ${4:initial-value})]
	    (fn [${5:props}]
	      [:${6:div}
	       ${0:content}])))

snippet js-interop "JavaScript interop"
	(${1:.-${2:property}} ${3:js-object})

snippet js-call "JavaScript method call"
	(.${1:method} ${2:js-object} ${0:args})

snippet cljs-test "ClojureScript test"
	(deftest ${1:test-name}
	  (testing "${2:test description}"
	    (is (= ${3:expected} ${0:actual}))))

snippet fulcro-component "Fulcro component"
	(defsc ${1:ComponentName} [${2:this props}]
	  {:query [:${3:db/id :item/name}]
	   :ident :${4:db/id}}
	  (${5:dom/div} {}
	    ${0:"Content"}))

snippet fulcro-mutation "Fulcro mutation"
	(defmutation ${1:mutation-name} [{:keys [${2:params}]}]
	  (action [{:keys [state]}]
	    (swap! state ${3:update-fn}${0: params})))

snippet re-frame-cofx "Re-frame co-effects"
	(rf/reg-cofx
	 ::${1:cofx-name}
	 (fn [cofx]
	   (assoc cofx ::${2:cofx-key} ${0:cofx-value})))

snippet re-frame-interceptor "Re-frame interceptor"
	(def ${1:interceptor-name}
	  (rf/->interceptor
	   :id ::${2:interceptor-id}
	   :before (fn [context] ${3:before-logic})
	   :after (fn [context] ${0:after-logic})))

snippet reagent-atom "Reagent atom"
	(def ${1:state} (r/atom ${0:initial-value}))

snippet cljs-ajax "ClojureScript AJAX call"
	(ajax/POST "${1:/api/endpoint}"
	  {:params ${2:params}
	   :handler #(${3:success-handler} %)
	   :error-handler #(${0:error-handler} %))

snippet core-async-cljs "Core.async in ClojureScript"
	(go
	  (let [${1:response} (<! (${2:async-operation}))]
	    ${0:handle-response}))

snippet component-did-mount "React componentDidMount"
	:component-did-mount
	(fn [${1:this}]
	  ${0:mount-logic})

snippet component-will-unmount "React componentWillUnmount"
	:component-will-unmount
	(fn [${1:this}]
	  ${0:cleanup-logic})

snippet use-effect "React useEffect hook"
	(r/use-effect
	  (fn []
	    ${1:effect-logic}
	    ${0:#(cleanup-logic)})
	  [${2:dependencies}])

snippet use-state "React useState hook"
	(let [[${1:state} ${2:set-state}] (r/use-state ${0:initial-value})]
	  ;; Use state and set-state)

snippet rum-component "Rum component"
	(rum/defcs ${1:component-name} < rum/reactive [${2:state props}]
	  [:${3:div}
	   ${0:content}])

snippet om-component "Om component"
	(defui ${1:ComponentName}
	  static om/IQuery
	  (query [${2:this}]
	    [:${3:db/id :item/name}])
	  Object
	  (render [${4:this}]
	    (${5:dom/div} nil
	      ${0:"Content"})))
